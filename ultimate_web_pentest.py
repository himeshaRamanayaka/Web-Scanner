#!/usr/bin/env python3
"""
Ultimate Web Pentest Script
Author: Your Name
GitHub: https://github.com/yourname/ultimate-web-pentest
Description: Automated reconnaissance + directory fuzzing + vulnerability discovery
             for educational and practice purposes.
"""

import os
import sys
import requests
import subprocess
from urllib.parse import urljoin
from concurrent.futures import ThreadPoolExecutor

# ------------------------------
# CONFIGURATION
# ------------------------------
COMMON_PATHS = [
    "index.php", "index.html", "login.php", "admin/", "dashboard/",
    "upload.php", "config.php", "db.php", "includes/", "backup/", "edit.php",
    "register.php", "profile.php", "forgot.php"
]

CMS_SIGNATURES = {
    "WordPress": ["wp-content/", "wp-login.php", "xmlrpc.php"],
    "Joomla": ["administrator/", "components/", "index.php?option="],
    "Drupal": ["sites/all/", "misc/drupal.js", "core/"],
    "IIS/ASP.NET": ["Default.aspx", "Web.config", "bin/"]
}

HEADERS = {"User-Agent": "Mozilla/5.0 (UltimatePentest)"}


# ------------------------------
# UTILS
# ------------------------------
def banner():
    print(r"""
  _   _ _   _ _ _ _             _        ____            _            
 | | | | |_(_) (_) |_ _ __ ___ | |__    |  _ \ ___  _ __| |_ ___ _ __ 
 | | | | __| | | | __| '_ ` _ \| '_ \   | |_) / _ \| '__| __/ _ \ '__|
 | |_| | |_| | | | |_| | | | | | |_) |  |  __/ (_) | |  | ||  __/ |   
  \___/ \__|_|_|_|\__|_| |_| |_|_.__/   |_|   \___/|_|   \__\___|_|   
                                                                      
                 Ultimate Web Pentest Script
    """)


def is_alive(url):
    try:
        r = requests.get(url, headers=HEADERS, timeout=5)
        return r.status_code < 500
    except:
        return False


def brute_paths(base_url, wordlist=None, threads=10):
    print("[*] Starting directory/file brute force...")
    if wordlist and os.path.exists(wordlist):
        with open(wordlist, "r", errors="ignore") as f:
            paths = [line.strip() for line in f if line.strip()]
    else:
        paths = COMMON_PATHS

    found = []

    def check(path):
        target = urljoin(base_url, path)
        try:
            r = requests.get(target, headers=HEADERS, timeout=5)
            if r.status_code == 200:
                print(f"[+] Found: {target}")
                found.append(target)
        except:
            pass

    with ThreadPoolExecutor(max_workers=threads) as ex:
        ex.map(check, paths)

    return found


def fingerprint_cms(base_url):
    print("[*] Fingerprinting CMS/framework...")
    hits = []
    for cms, indicators in CMS_SIGNATURES.items():
        for ind in indicators:
            url = urljoin(base_url, ind)
            try:
                r = requests.get(url, headers=HEADERS, timeout=5)
                if r.status_code < 400:
                    hits.append(cms)
                    print(f"[+] {cms} indicator found: {ind}")
                    break
            except:
                continue
    return list(set(hits))


def run_nikto(base_url):
    print("[*] Running Nikto scan...")
    try:
        subprocess.run(["nikto", "-host", base_url], check=False)
    except FileNotFoundError:
        print("[!] Nikto not found. Install with: sudo apt install nikto")


def run_sqlmap(target_url):
    print("[*] Testing for SQLi with sqlmap...")
    try:
        subprocess.run(["sqlmap", "-u", target_url, "--batch", "--crawl=1"], check=False)
    except FileNotFoundError:
        print("[!] sqlmap not found. Install with: sudo apt install sqlmap")


# ------------------------------
# MAIN
# ------------------------------
def main():
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <base_url> [optional_wordlist]")
        sys.exit(1)

    base_url = sys.argv[1]
    if not base_url.startswith("http"):
        base_url = "http://" + base_url

    wordlist = sys.argv[2] if len(sys.argv) > 2 else None

    banner()

    if not is_alive(base_url):
        print("[!] Target not reachable!")
        sys.exit(1)

    found_paths = brute_paths(base_url, wordlist)
    cms = fingerprint_cms(base_url)

    if cms:
        print(f"[+] CMS Detected: {', '.join(cms)}")

    # Example: If edit.php found â†’ test SQLi
    for path in found_paths:
        if "edit.php" in path or "id=" in path:
            run_sqlmap(path)

    run_nikto(base_url)


if __name__ == "__main__":
    main()